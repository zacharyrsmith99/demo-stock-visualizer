name: Deploy to Production

on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      src_changed: ${{ steps.check_src.outputs.src_changed }}
    steps:
      - uses: actions/checkout@v3
      - name: Check for changes in src directory
        id: check_src
        run: |
          git fetch origin develop
          if git diff --quiet origin/develop HEAD -- src/; then
            echo "src_changed=false" >> $GITHUB_OUTPUT
          else
            echo "src_changed=true" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: [check-changes]
    if: needs.check-changes.outputs.src_changed == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: [check-changes, build-and-push]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.31.0'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name ${{ secrets.AWS_STOCKZRS_KUBERNETES_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
  
    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
          kubectl apply -f k8s/stockzrs-relay-service-deployment.yml