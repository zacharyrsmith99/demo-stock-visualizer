name: Deploy to Production

on:
  push:
    branches:
      - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_URL }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        REPO_NAME=$(echo $ECR_REPOSITORY | cut -d'/' -f2)
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST_NAME: ${{ secrets.EC2_HOST_NAME }}
        USER_NAME: ${{ secrets.EC2_USER_NAME }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_URL }}
        IMAGE_TAG: ${{ github.sha }}
        STOCKZRS_PORT: ${{ secrets.STOCKZRS_PORT }}
      run: |
        echo "$PRIVATE_KEY" > private_key
        chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} "
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker stop stockzrs-container || true
          docker rm stockzrs-container || true
          docker run -d --name stockzrs-container -p $STOCKZRS_PORT:$STOCKZRS_PORT $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        "